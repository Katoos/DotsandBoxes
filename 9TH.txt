#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <windows.h>
//the clock in the of the system should be used
//main menu
//load
//save
typedef struct {
    char name[25];
    char color;
    int score;
}player;
player p[2];
/*void time_counter(){  // the function of the game counter of time
 int h,f,s;
  for(h=0;h<12;h++){
    for(f=0;f<59;f++){
       for(s=0;s<59;s++){
            printf("Game time :%d:%d:%d\r",h,f,s);
            Sleep(1500);
       }
    }
  }
 }*/
void print() {
    //printf("Player(1) VS Player(2)\"")
    //printf("Player(1) Name: ");
    //scanf("%c",P[0].name);
    //printf("\n");
    //printf("Player(2) Name: ");
    //scanf("%c",p[1].name);
    //printf("\n");
    //computer.name = 'Computer';
    //player1.color = 'Blue';
    //player2.color = 'Red';
    //computer.color = 'Red';
    //computer.score = score3;
    int gamemode,n,m;
    printf("      Hello Gamer!\n");
    here :
    printf("(1) Choose Mode Of The Game\n");
    printf("   \" BEGINNER \" Press 1\n    \" EXPERT \"  Press 2\n");
    scanf("%d",&gamemode) ;
    if(gamemode==1){
        n = 5;                                                                                  // No. of Beginner Array Elements
        m = 12;                                                                                 // No. of Lines can be Connected
    }
    else if(gamemode==2){
        n = 11 ;                                                                                // No. of Expert Array Elements
        m = 60 ;                                                                                // No. of Lines can be Connected
    }
    else{
        printf("Invalid Input\n");
        goto here ;
    }
    char gridArray[n][n];
    for (int i=0 ; i<n ; i++) {
        for(int j=0 ; j<n ; j++) {
            if (i%2 == 0 && j%2 == 0) {
                gridArray[i][j] = 254;
            }
            else if (i%2 == 0 && j%2 == 1) {
                gridArray[i][j] = ' ' ;
            }
            else if (i%2 == 1 && j%2 == 0) {
                gridArray[i][j] = ' ';
            }
            else if (i%2 == 1 && i%2 == 1){
                gridArray[i][j] = ' ';
            }
        }
    }
    system("cls");
    if (gamemode == 1) {
        printf("NOTE: \'A\' is for Player (1) & \'B\' is for Player (2)\n\n");                 // To let the user know what is A and what is B that will be printed in the scoring process
        printf("\t\t\t     0 1 2 3 4\n\n");
    }
    else if (gamemode == 2) {
        printf("NOTE: \'A\' is for Player (1) & \'B\' is for Player (2)\n\n");                 // To let the user know what is A and what is B that will be printed in the scoring process
        printf("\t\t\t     0 1 2 3 4 5 6 7 8 9 10\n");
    }
    for (int i=0 ; i<n ; i++) {
        if (i != 10) {
            printf("\t\t\t%d    ",i);
        }
        else if (i == 10) {
            printf("\t\t       %d    ",i);
        }
        for (int j=0 ; j<n ; j++) {
            printf("%c ",gridArray[i][j]);
        }
        printf("\n");
    }
    int count = 0;                                                                             // if count is even so its player1 turn if odd player 2 turn
    int player_id = 0;                                                                         // for player id
    printf("\n");
    for(int i=0 ; i<m ; i++) {
        player_id = count%2;
        if (gamemode == 1) {
            printf("\t\t\tPlayer (%d) Turn\n\n", player_id+1);                                // player_id will always equal 1 or 0, 1 when count is odd ,0 when count is even
        }
        else if (gamemode == 2) {
            printf("         \t\t\tPlayer (%d) Turn\n\n", player_id+1);
        }
        printf("Enter Row Then Column Of The Required Line [example: 0 3] --> ");
        int r,c;                                                                             // r = row , c = column
        scanf("%d %d",&r,&c);
        printf("\n");
        fflush(stdin);                                                                        //remove '/n' from input stream (stdin) FILE
        while( ((r%2==0) && (c%2==0)) || ((r%2==1) && (c%2==1)) || (r>=n) || (c>=n) || (r<0) || (c<0)|| (isalpha(r)) || (isalpha(c)) || (gridArray[r][c] == '|') || (gridArray[r][c] == '-') ){
            printf("\'WRONG INPUT\' Enter Row Then Column Of The Required Line [example: 0 3] --> ");
            scanf("%d %d",&r,&c);
            fflush(stdin);
        }
        for(int i=0 ; i<n ; i++) {
            for(int j=0 ; j<n ; j++) {
                if (r == i && c == j) {
                    if (i%2 == 0 && j%2 == 1) {
                        gridArray[r][c] = '-';
                    }
                    else if (i%2 == 1 && j%2 == 0) {
                        gridArray[r][c] = '|';
                    }
                }
            }
        }
        count++;                                                                             // when any player enter his input count inc by one to change turns
        if (gridArray[r][c] == '|') {                                                        //checks if the last vertical line drawn made a box or not
            if ( (gridArray[r][c+2]=='|')&&(gridArray[r+1][c+1]=='-')&&(gridArray[r-1][c+1]=='-')&&(gridArray[r][c-2]=='|')&&(gridArray[r-1][c-1]=='-')&&(gridArray[r+1][c-1]=='-') ){
                p[player_id].score += 2;
                count++;                                                                     //if any player draw a box he will continue playing until he did not draw a box so count will remain even or odd
                if (count % 2 == 0) {
                    printf("\033[1;34m");                                                    //using ANSI color of blue
                    printf("%c",gridArray[r][c+1] = 'A');                                    //player1 Symbol
                    printf("%c",gridArray[r][c-1] = 'A');                                    //player1 Symbol
                    printf("\033[0m");                                                       //using ANSI color of reset
                }
                else {
                    printf("\033[1;31m");                                                    //using ANSI color of red
                    printf("%c",gridArray[r][c+1] = 'B');                                    //player2 Symbol
                    printf("%c",gridArray[r][c-1] = 'B');                                    //player2 Symbol
                    printf("\033[0m");                                                       //using ANSI color of reset
                }
            }
            else if ( (gridArray[r][c+2]=='|')&&(gridArray[r+1][c+1]=='-')&&(gridArray[r-1][c+1]=='-') ) {
                p[player_id].score += 1;
                count++;
                if (count % 2 == 0){
                    printf("\033[1;34m");                                                   //using ANSI color of blue
                    printf("%c",gridArray[r][c+1] = 'A');                                   //player1 Symbol
                    printf("\033[0m");                                                      //using ANSI color of reset
                }
                else {
                printf("\033[1;31m");                                                       //using ANSI color of red
                printf("%c",gridArray[r][c+1] = 'B');                                       //player2 Symbol
                printf("\033[0m");                                                          //using ANSI color of reset
                }
            }
            else if ( (gridArray[r][c-2]=='|')&&(gridArray[r-1][c-1]=='-')&&(gridArray[r+1][c-1]=='-') ) {
                p[player_id].score += 1;
                count++;
                if (count % 2 == 0) {
                    printf("\033[1;34m");                                                   //using ANSI color of blue
                    printf("%c",gridArray[r][c-1] = 'A');                                   //player1 Symbol
                    printf("\033[0m");                                                      //using ANSI color of reset
                }
                else {
                    printf("\033[1;31m");                                                   //using ANSI color of red
                    printf("%c",gridArray[r][c-1] = 'B');                                   //player2 Symbol
                    printf("\033[0m");                                                      //using ANSI color of reset
                }
            }
        }
        else if (gridArray[r][c]=='-') {                                                   //checks if the last horizontal line drawn made a box or not
            if ( (gridArray[r+2][c]=='-')&&(gridArray[r-2][c]=='-')&&(gridArray[r+1][c+1]=='|')&&(gridArray[r+1][c-1]=='|')&&(gridArray[r-1][c+1]=='|')&&(gridArray[r-1][c-1]=='|') ) {
                p[player_id].score += 2;
                count++;
                if (count % 2 == 0) {
                    printf("\033[1;34m");                                                   //using ANSI color of blue
                    printf("%c",gridArray[r+1][c] = 'A');                                   //player1 Symbol
                    printf("%c",gridArray[r-1][c] = 'A');                                   //player1 Symbol
                    printf("\033[0m");                                                      //using ANSI color of reset
                }
                else {
                    printf("\033[1;31m");                                                   //using ANSI color of red
                    printf("%c",gridArray[r+1][c] = 'B');                                   //player2 Symbol
                    printf("%c",gridArray[r-1][c] = 'B');                                   //player2 Symbol
                    printf("\033[0m");                                                      //using ANSI color of reset
                }
            }
            else if ( (gridArray[r+2][c]=='-')&&(gridArray[r+1][c+1]=='|')&&(gridArray[r+1][c-1]=='|') ) {
                p[player_id].score += 1;
                count++;
                if (count % 2 == 0) {
                    printf("\033[1;34m");                                                  //using ANSI color of blue
                    printf("%c",gridArray[r+1][c] = 'A');                                  //player1 Symbol
                    printf("\033[0m");                                                     //using ANSI color of reset
                }
                else {
                    printf("\033[1;31m");                                                  //using ANSI color of red
                    printf("%c",gridArray[r+1][c] = 'B');                                  //player2 Symbol
                    printf("\033[0m");                                                     //using ANSI color of reset
                }
            }
            else if ( (gridArray[r-2][c]=='-')&&(gridArray[r-1][c+1]=='|')&&(gridArray[r-1][c-1]=='|') ) {
                p[player_id].score+=1;
                count++;
                if (count % 2 == 0) {
                    printf("\033[1;34m");                                                  //using ANSI color of blue
                    printf("%c",gridArray[r-1][c] = 'A');                                  //player1 Symbol
                    printf("\033[0m");                                                     //using ANSI color of reset
                }
                else {
                    printf("\033[1;31m");                                                  //using ANSI color of red
                    printf("%c",gridArray[r-1][c] = 'B');                                  //player2 Symbol
                    printf("\033[0m");                                                     //using ANSI color of reset
                }
            }
        }
        system("cls");
        if (gamemode == 1) {
            printf("NOTE: \'A\' is for Player (1) & \'B\' is for Player (2)\n\n");
            printf("\t\t\t     0 1 2 3 4\n");
        }
        else if (gamemode == 2) {
            printf("NOTE: \'A\' is for Player (1) & \'B\' is for Player (2)\n\n");
            printf("\t\t\t     0 1 2 3 4 5 6 7 8 9 10\n");
        }
        for (int i=0 ; i<n ; i++) {
           if (i != 10) {
                printf("\t\t\t%d    ",i);
            }
            else if (i == 10) {
                printf("\t\t       %d    ",i);
            }
            for (int j=0 ; j<n ; j++) {
                if ((i%2 == 1)&& (j%2==1)&&(gridArray[i][j]=='A') ){ //we here check whether the cell saving a character A
                    printf("\033[1;34m"); //using ANSI color of blue
                    printf("%c ",gridArray[i][j]);
                    printf("\033[0m"); //using ANSI color of reset
                }else if((i%2 == 1)&& (j%2==1)&&(gridArray[i][j]=='B')){ //we here check whether the cell saving a character B
                    printf("\033[1;31m"); //using ANSI color of blue
                    printf("%c ",gridArray[i][j]);
                    printf("\033[0m"); //using ANSI color of reset
                }else {
                printf("%c ",gridArray[i][j]); //we here check whether the cell saving a character '-' or '|'
                }
            }
            printf("\n");
        }

        FILE *fsave ;
        fsave = fopen( "game1.txt" , "w" );
        int s;
        printf("Save Game: Press1");
        scanf("%d",&s);
        switch (s) {
            case 1 :
            for (int i=0; i<n; i++) {
                for (int j=0; j<n; j++) {
                    fprintf (fsave,"%d\n",i);
                }
            }
        fclose(fsave);
        break;
        }
        printf("\n");
        printf("\033[1;34m");                                                            //using ANSI color of blue
        printf("Player (1) Score: %d\n",p[0].score);
        printf("\033[0m");                                                               //using ANSI color of reset
        printf("\033[1;31m");                                                            //using ANSI color of red
        printf("Player (2) Score: %d\n",p[1].score);
        printf("\033[0m");                                                               //using ANSI color of reset
        if (i == m-1) {
            if (p[0].score > p[1].score) {
                printf("\033[1;34m");                                                    //using ANSI color of blue
                printf("\nPlayer 1 is The WINNER! \n\n\n\n");                            //player1 color
                printf("\033[0m");                                                       //using ANSI color of reset
            }
            else if (p[0].score < p[1].score) {
                printf("\033[1;31m");                                                    //using ANSI color of red
                printf("\nPlayer 2 is The WINNER! \n\n\n\n");                            //player2 color
                printf("\033[0m");                                                       //using ANSI color of reset
            }
            else {
                printf("\033[0;35m");
                printf("\nThe Game is DRAW! \n\n\n\n");
                printf("\033[0m");                                                       //using ANSI color of reset
            }
        }
        //time_counter();                                                                // the function of the game counter of time
    }
}
int main()
{
    print();
    return 0;
}
   /*     int l;
        FILE * fsave ;
                printf("Load Game: Press 2");
        scanf("%d",&l);
        switch (l) {
        case '2' :
            fsave = fopen( "game1.txt" , "r" );
            for(int i=0; i<n; i++) {
                for(int j=0; j<n; j++) {
                    fscanf(fsave, "%c",&gridArray[i][j]);
                }
            }
            fclose(fsave);
            break;
*/
/*
FILE *fsave ;
int s;
printf("Save Game: Press1");
scanf("%d",&s);
switch (s) {
    case '1' :
        fsave = fopen( "game1.txt" , "w" );
        for (int i=0; i<n; i++) {
            for (int j=0: j<n; j++) {
                    fprintf (fsave,"%c\n",gridArray[i][j]);
            }
        }
        fclose(fsave);
        break;
}
*/
