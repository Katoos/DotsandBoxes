#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <windows.h>
#include <string.h>
#include <time.h>
typedef struct {
    char name[25];
    int score;
}player;
 player p[2], topGamers[1000], temp, comp, p1;


void computer() {
    int p1moves = 0 ;
    int compumoves = 0 ;
    int player_points=0;
    int gamemode,n,m,minutes_of_game;
    int x;
    FILE *game ;                                                                        //File Pointer Declaration
    printf("To SAVE in any file Press(0)\nTo SAVE in a certain file during the game Press(1)\n");
    scanf("%d",&x);
    int k;
    if (x == 0) {
        game = fopen("Save0.txt", "r");
        fscanf(game,"%d",&k);
        fclose(game);
        if (k == 1) {
            k = 2;
        }
        else if (k == 2){
            k = 3;
        }
        else if (k == 3) {
            k = 1;
        }
        game = fopen("Save0.txt", "w");
        fprintf(game,"%d",k);
        fclose(game);
    }
    printf("      Hello Gamer!\n");
    here :
    printf("(1) Choose Mode Of The Game\n");
    printf("   \" BEGINNER \" Press 1\n    \" EXPERT \"  Press 2\n");
    printf("\033[1;34m");
    printf("\nMoves of player1 %d \t\t\t",p1moves);                 //Print number of moves for each player
    printf("\033[0m");
    printf("\033[1;31m");
    printf("Moves of computer %d\n",compumoves);
    printf("\033[0m");
    start2 = clock();
    
    scanf("%d",&gamemode) ;
    fflush(stdin);
    if(gamemode==1){
        n = 5;
        m = 12;
    }
    else if(gamemode==2){
        n = 11 ;
        m = 60 ;
    }
    else{
        printf("Invalid Input\n");
        goto here ;
    }
    printf("\n");
    char gridArray[n][n][2];
    for (int i=0 ; i<n ; i++) {
        for(int j=0 ; j<n ; j++) {
            if (i%2 == 0 && j%2 == 0) {
                gridArray[i][j][0] = 254;
            }
            else if (i%2 == 0 && j%2 == 1) {
                gridArray[i][j][0] = ' ' ;
            }
            else if (i%2 == 1 && j%2 == 0) {
                gridArray[i][j][0] = ' ';
            }
            else if (i%2 == 1 && i%2 == 1){
                gridArray[i][j][0] = ' ';
            }
        }
    }
    system("cls");
    if (gamemode == 1) {
        printf("\t\t\t     0 1 2 3 4\n");
    }
    else if (gamemode == 2) {
        printf("\t\t\t     0 1 2 3 4 5 6 7 8 9 10\n");
    }
    for (int i=0 ; i<n ; i++) {
        if (i != 10) {
            printf("\t\t\t%d    ",i);
        }
        else if (i == 10) {
            printf("\t\t       %d    ",i);
        }
        for (int j=0 ; j<n ; j++) {
            printf("%c ",gridArray[i][j][0]);
        }
        printf("\n");
    }
    int count = 0;  // if count is even so its player1 turn if odd computer turn
    printf("\n");
    int turn = 0 ;                      //count no of games played
    int freelines = 0 ;                  // number of free lines
    for(int i=0 ; i<m ; i++) {
        omar :
        if(count % 2 == 0 ){
            printf("player 1 turn\n\n");
        }
        else{
            printf("Computer turn\n\n") ;
        }
        int r , c;
        int r2,c2 ;
        if(count % 2 == 0){     //Player 1 enters is row and and column
            printf("Enter Row Then Column Of The Required Line [example: 0 3] --> ");
            clock_t start, end;     // clock_t is a type(class) and this is used in the timer function
        double cpu_time_used;
        start = clock();  //the beginning of counting
            scanf("%d %d",&r,&c);
            end = clock();   //the end of counting
        cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
        if(cpu_time_used>59.99){
          while(cpu_time_used>60){
          cpu_time_used=cpu_time_used-60 ; //the bonus part (that when the user idle for a minute we update the time)
          }
        }
       // if((((r%2==1) && (c%2==0)) || ((r%2==0) && (c%2==1)))&& r<n && c<n){
          printf("\033[1;36m");
          printf("\nplayer 1 took : %.2f seconds to play his turn.\n",cpu_time_used);
          printf("\033[0m");
          Sleep(1500);
            printf("\n");
            fflush(stdin);  //remove /n from input stream (stdin) FILE
            int r1,c1;
            if (r == 0 && c == 0) {
            }
            else {
                r1 = r;
                c1 = c;
            }
            if (i>0) {                                                                                   //remove '/n' from input stream (stdin) FILE
                if ( r == 0 && c == 0 ) {
                if(gridArray[r1][c1][0]=='|'){
                    gridArray[r1][c1+1][0]=' ';
                    gridArray[r1][c1-1][0]=' ';
                    gridArray[r1][c1][0] = ' ';
                    gridArray[r2][c2][0] = ' ';
                }else if(gridArray[r1][c1][0]=='-'){
                    gridArray[r1+1][c1][0]=' ';
                    gridArray[r1-1][c1][0]=' '; 
                    gridArray[r1][c1][0] = ' ';
                    gridArray[r2][c2][0] = ' ';                 
                }
                   i=i-2;
                   goto omar;
                }
            }
            while((((r%2==0)&&(c%2==0))||((r%2==1)&&(c%2==1)))||(r>=n)||(c>=n) || (isalpha(r)) || (isalpha(c)) || (gridArray[r][c][0] == '|') || (gridArray[r][c][0] == '-') || (gridArray[r][c][1] == '|') || (gridArray[r][c][1] == '-') || r<0 || c<0 ){
                printf("Wrong input enter Row Then Column Of The Required Line [example: 0 3] --> "); // checks if row and column enterd is valid
                cpu_time_used = 0 ;
                start = clock();
                scanf("%d %d",&r,&c);
                end = clock();
            cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
            if(cpu_time_used>59.99){
              while(cpu_time_used>60){
               cpu_time_used=cpu_time_used-60 ; //the bonus part (that when the user idle for a minute we update the time)
              }
             }
          //  if((((r%2==1) && (c%2==0)) || ((r%2==0) && (c%2==1)))&& r<n && c<n && isalpha(r)==0 && isalpha(c)==0){
              printf("\033[1;36m");
              printf("\nplayer(%d) took : %.2f seconds to play his turn.\n",(count%2)+1,cpu_time_used);
              printf("\033[0m");
              Sleep(1500);
                fflush(stdin);
            }
            cpu_time_used=0;

            for(int i=0 ; i<n ; i++ ) {
                for(int j=0 ; j<n ; j++) {
                    if (r == i && c == j) {
                        if (i%2 == 0 && j%2 == 1) {
                            gridArray[r][c][0] = '-';
                            gridArray[r][c][1] = 0 ;

                        }
                        else if (i%2 == 1 && j%2 == 0) {
                            gridArray[r][c][0] = '|';
                            gridArray[r][c][1] = 0 ;
                        }
                    }
                }
            }
            }
        else if(count % 2 == 1){ //computer plays random line

            do{       //loop until the computer draw a correct line
                Sleep(500) ;
                r = rand() % n ;
                c = rand() % n ; //chooses ranodom r(row) and random c(column)

                //checks if its a true place to draw line
            }while( (gridArray[r][c][0] == '-') || (gridArray[r][c][0] == '|') || ((r%2==0))&& ((c%2==0)) || ((r%2==1)&&(c%2==1)) );
            r2 = r ;
            c2 = c ;
            for(int i=0 ; i<n ; i++ ) {
                    for(int j=0 ; j<n ; j++) {
                        if (r == i && c == j) {
                            if (i%2 == 0 && j%2 == 1) {  //assign the true line in the memory
                                gridArray[r][c][0] = '-';
                                gridArray[r][c][1] = 1 ;
                    }
                            else if (i%2 == 1 && j%2 == 0) {
                                gridArray[r][c][0] = '|';
                                gridArray[r][c][1] = 1 ;
                    }
                }
            }
        }

        }
       if(count % 2 == 0){   //WHEN player or computer plays his move w=increments bu one
            p1moves++ ;
       }
       else{
            compumoves++ ;
       }
       count ++ ;
       turn++ ;
      if(gridArray[r][c][0]=='|'){  //checks if the last vertical line drawn made a box or not
            if((gridArray[r][c+2][0]=='|')&&(gridArray[r+1][c+1][0]=='-')&&(gridArray[r-1][c+1][0]=='-')&&(gridArray[r][c-2][0]=='|')&&(gridArray[r-1][c-1][0] == '-')&&(gridArray[r+1][c-1][0] =='-')){
                count++;   // if any player drew a box he will continue playing until he did not drew a box so count will remain even or odd

                if(count % 2 == 0){
                    p1.score+=2;
                    printf("%c",gridArray[r][c+1][0] = 'A');
                    printf("%c",gridArray[r][c-1][0] = 'A');
                }
                else{
                    comp.score+=2 ;
                    printf("%c",gridArray[r][c+1][0] = 'C');
                    printf("%c",gridArray[r][c-1][0] = 'C');

                }

            }else if((gridArray[r][c+2][0]=='|')&&(gridArray[r+1][c+1][0]=='-')&&(gridArray[r-1][c+1][0]=='-')){
                count++;
                if(count % 2 == 0){
                    p1.score++;
                    printf("%c",gridArray[r][c+1][0] = 'A');
                }
                else{
                    comp.score++ ;
                    printf("%c",gridArray[r][c+1][0] = 'C');
                }

            }else if((gridArray[r][c-2][0] =='|')&&(gridArray[r-1][c-1][0] =='-')&&(gridArray[r+1][c-1][0] =='-')){
                count++;
                if(count % 2 == 0){
                    p1.score++;

                    printf("%c",gridArray[r][c-1][0] = 'A');
                }
                else{
                    comp.score++;
                    printf("%c",gridArray[r][c-1][0] = 'C');
                }

               }
      }else if(gridArray[r][c][0]=='-'){   //checks if the last horzintal line drawn made a box or not
            if((gridArray[r+2][c][0] =='-')&&(gridArray[r-2][c][0]=='-')&&(gridArray[r+1][c+1][0]=='|')&&(gridArray[r+1][c-1][0]=='|')&&(gridArray[r-1][c+1][0]=='|')&&(gridArray[r-1][c-1][0]=='|')){
                count++;
                if(count % 2 == 0){
                    p1.score+=2;

                    printf("%c",gridArray[r+1][c][0] = 'A');
                    printf("%c",gridArray[r-1][c][0] = 'A');
                }
                else{
                    comp.score+=2;
                    printf("%c",gridArray[r+1][c][0] = 'C');
                    printf("%c",gridArray[r-1][c][0] = 'C');

                }
            }

            else if((gridArray[r+2][c][0]=='-')&&(gridArray[r+1][c+1][0] =='|')&&(gridArray[r+1][c-1][0] =='|')){

                count++;
                if(count % 2 == 0){
                    p1.score+=1;
                    printf("%c",gridArray[r+1][c][0] = 'A');
                }
                else{
                    comp.score++ ;
                    printf("%c",gridArray[r+1][c][0] = 'C');
                }
            }
            else if((gridArray[r-2][c][0] =='-')&&(gridArray[r-1][c+1][0] =='|')&&(gridArray[r-1][c-1][0] =='|')){
                count++;
                if(count % 2 == 0){
                    p1.score++;
                    printf("%c",gridArray[r-1][c][0] = 'A');
                }
                else{
                    comp.score++ ;
                    printf("%c",gridArray[r-1][c][0] = 'C');
                }
            }
      }
        system("cls");
        if (gamemode == 1) {
            printf("\t\t\t     0 1 2 3 4\n");
        }
        else if (gamemode == 2) {
            printf("\t\t\t     0 1 2 3 4 5 6 7 8 9 10\n");
        }
        for (int i=0 ; i<n ; i++) {
            if (i != 10) {
                printf("\t\t\t%d    ",i);
            }
            else if (i == 10) {
                printf("\t\t       %d    ",i);
            }
            for (int j=0 ; j<n ; j++) {
                if ( (i%2 == 1)&& (j%2==1)&&(gridArray[i][j][0]=='A') ) {                   //we here check whether the cell saving a character A
                    printf("\033[1;34m");                                                   //using ANSI color of blue
                    printf("%c ",gridArray[i][j][0]);
                    printf("\033[0m");                                                      //using ANSI color of reset
                }
                else if ( (i%2 == 1)&& (j%2 == 1) && (gridArray[i][j][0] == 'C') ) {        //we here check whether the cell saving a character B
                    printf("\033[1;31m");                                                   //using ANSI color of Red
                    printf("%c ",gridArray[i][j][0]);
                    printf("\033[0m");                                                      //using ANSI color of reset
                }
                else if ( (i%2 == 0) && (j%2 == 1 ) && (gridArray[i][j][0] == '-') ) {
                    if (gridArray[i][j][1]==0) {
                        printf("\033[1;34m");                                               //using ANSI color of blue
                        printf("%c ",gridArray[i][j][0]);
                        printf("\033[0m");
                    }
                    else {
                        printf("\033[1;31m");                                               //using ANSI color of red
                        printf("%c ",gridArray[i][j][0]);
                        printf("\033[0m");
                    }
                }
                else if ( (i%2 == 1) && (j%2 == 0 ) && (gridArray[i][j][0] == '|') ) {
                    if (gridArray[i][j][1]==0) {
                        printf("\033[1;34m");                                               //using ANSI color of blue
                        printf("%c ",gridArray[i][j][0]);
                        printf("\033[0m");
                    }
                    else {
                        printf("\033[1;31m");                                               //using ANSI color of red
                        printf("%c ",gridArray[i][j][0]);
                        printf("\033[0m");
                    }
                }
                else {
                printf("%c ",gridArray[i][j][0]);                                           //we here check whether the cell saving a character '-' or '|'
                }

            }
            printf("\n");
        }
        freelines = m - turn ;
        FILE *game ;                                                                        //File Pointer Declaration
        int save;
        if (x == 0) {
            printf("Save Game: Press(1) : ");
            scanf("%d",&save);
            switch (save) {
                case 1 :
                    if (k == 1) {
                        game = fopen("Save1.txt", "w");                                     //Open Text File with the name "Save" to save in it the data of the grid
                        for (int i=0; i<n; i++) {                                           //Loop for printing the data of the grid to a file to save it
                            for (int j=0; j<n; j++) {
                                fprintf (game,"%c",gridArray[i][j][0]);
                            }
                        }
                        fprintf(game,"%d\n",freelines);
                        fprintf(game,"%d\n",p1.score);
                        fprintf(game,"%d",comp.score);
                        fclose(game);                                                       //closing File
                        break;
                    }
                    else if (k == 2) {
                        game = fopen("Save2.txt", "w");
                        for (int i=0; i<n; i++) {                                           //Loop for printing the data of the grid to a file to save it
                            for (int j=0; j<n; j++) {
                                fprintf (game,"%c",gridArray[i][j][0]);
                            }
                        }
                        fprintf(game,"%d\n",freelines);
                        fprintf(game,"%d\n",p1.score);
                        fprintf(game,"%d",comp.score);
                        fclose(game);
                    }
                    else if (k == 3) {
                        game = fopen("Save3.txt", "w");
                        for (int i=0; i<n; i++) {                                          //Loop for printing the data of the grid to a file to save it
                            for (int j=0; j<n; j++) {
                                fprintf (game,"%c",gridArray[i][j][0]);
                            }
                        }
                        fprintf(game,"%d\n",freelines);
                        fprintf(game,"%d\n",p1.score);
                        fprintf(game,"%d",comp.score);
                        fclose(game);
                    }
            }
        }
        else if (x == 1) {
            printf("To SAVE in File 1 Press (1)\nTo SAVE in File 2 Press (2)\nTo SAVE in File 3 Press (3)\n");
            scanf("%d",&save);
            switch (save) {
                case 1 :
                    game = fopen("Save1.txt", "w");                                     //Open Text File with the name "Save" to save in it the data of the grid
                    for (int i=0; i<n; i++) {                                           //Loop for printing the data of the grid to a file to save it
                        for (int j=0; j<n; j++) {
                            fprintf (game,"%c",gridArray[i][j][0]);
                        }
                    }
                    fprintf(game,"%d\n",freelines);
                    fprintf(game,"%d\n",p1.score);
                    fprintf(game,"%d",comp.score);
                    fclose(game);                                                       //closing File
                    break;
                case 2 :
                    game = fopen("Save2.txt", "w");
                    for (int i=0; i<n; i++) {                                           //Loop for printing the data of the grid to a file to save it
                        for (int j=0; j<n; j++) {
                            fprintf (game,"%c",gridArray[i][j][0]);
                        }
                    }
                    fprintf(game,"%d\n",freelines);
                    fprintf(game,"%d\n",p1.score);
                    fprintf(game,"%d",comp.score);
                    fclose(game);                                                        //closing File
                    break;
                case 3 :
                    game = fopen("Save2.txt", "w");
                    for (int i=0; i<n; i++) {                                           //Loop for printing the data of the grid to a file to save it
                        for (int j=0; j<n; j++) {
                            fprintf (game,"%c",gridArray[i][j][0]);
                        }
                    }
                    fprintf(game,"%d\n",freelines);
                    fprintf(game,"%d\n",p1.score);
                    fprintf(game,"%d",comp.score);
                    fclose(game);                                                        //closing File
                    break;
            }
        }

        printf("\n");
                end2 = clock();
                seconds_of_game= ((double) (end2 - start2)) / CLOCKS_PER_SEC;
                if(seconds_of_game>=60){
                    minutes_of_game=seconds_of_game/60;
                    tmp=seconds_of_game; //to keep the value of time of the total game in seconds
                    seconds_of_game= tmp - minutes_of_game * 60 ;
                }
                else{
                        minutes_of_game = 0 ;

                }
                printf("\nThe total time of the game is : %d minutes & %.2f seconds\n\n",minutes_of_game,seconds_of_game);            if(i == m-1){
                if(p1.score > comp.score){
                    printf("Player 1 is the winner. \n\n\n\n");
                }
                else if(p1.score < comp.score){
                    printf("Computer is the winner. \n\n\n\n");
                }
                else{
                    printf("The game is draw. \n\n\n\n");

                }
            }
            printf("\nNumber of Remaining Lines : %d\n\n",freelines);


    }
    Sleep(1500);
    system("cls");
    if (p1.score > comp.score) {
        printf("Enter YOUR NAME Player 1: ");
        scanf("%s",p1.name);
    }
    Sleep(250);
    system("cls");
    FILE *rank;
    rank = fopen("Rank.txt" , "a");
    if (p1.score > comp.score) {
        fprintf(rank,"%s %d ",p1.name,p1.score);
    }
    fclose(rank);
    rank = fopen("Rank.txt" , "r");
    for(int i=0; i<1000; i++) {
    fscanf(rank,"%s",topGamers[i].name);
    fscanf(rank,"%d",&topGamers[i].score);
    }
    fclose(rank);
    for(int i=0; i<1000; i++) {
        for(int j=0; j<1000; j++) {
            if (strcasecmp(topGamers[i].name, topGamers[j].name) == 0 && topGamers[i].score < topGamers[j].score) {
                topGamers[i].score = 0;
            }
        }
    }
    for(int i=0; i<1000; i++) {
        for(int j=0; j<1000; j++) {
            if (topGamers[j].score < topGamers[j+1].score) {
                temp = topGamers[j];
                topGamers[j] = topGamers[j+1];
                topGamers[j+1] = temp;
            }
        }
    }
    printf("\t\t\tTop 10\n\n");
    printf("\t\t      Name    Score\n\n");
    for (int i=0; i<10; i++) {
        if (i != 9) {
        printf("\t\t(%d)  %s\t%d\n",i+1,topGamers[i].name,topGamers[i].score);
        }
        else {
        printf("\t\t(%d) %s\t%d\n",i+1,topGamers[i].name,topGamers[i].score);
        }
    }

}
