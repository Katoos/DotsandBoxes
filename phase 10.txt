#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#include <windows.h>
#include <time.h>
//main menu
//load
//save
//top 10
typedef struct {
    char name[25];
    char color;
    int score;
}player;
player p[2];
void print() {
    //printf("Player(1) VS Player(2)\"")
    //printf("Player(1) Name: ");
    //scanf("%c",P[0].name);
    //printf("\n");
    //printf("Player(2) Name: ");
    //scanf("%c",p[1].name);
    //printf("\n");
    //computer.name = 'Computer';
    //player1.color = 'Blue';
    //player2.color = 'Red';
    //computer.color = 'Red';
    //computer.score = score3;
    int gamemode,n,m;
    printf("Hello Gamer!\n");
    here :
    printf("(1) Choose Mode Of The Game\n");
    printf("   \" BEGINNER \" Press 1\n    \" EXPERT \"  Press 2\n");
    scanf("%d",&gamemode) ;
    if(gamemode==1){
        n = 5;                                                                                  // No. of Beginner Array Elements
        m = 12;                                                                                 // No. of Lines can be Connected
    }
    else if(gamemode==2){
        n = 11 ;                                                                                // No. of Expert Array Elements
        m = 60 ;                                                                                // No. of Lines can be Connected
    }
    else{
        printf("Invalid Input\n");
        goto here ;
    }
    char gridArray[n][n][2];
    for (int i=0 ; i<n ; i++) {
        for(int j=0 ; j<n ; j++) {
            if (i%2 == 0 && j%2 == 0) {
                gridArray[i][j][0] = 254;
            }
            else if (i%2 == 0 && j%2 == 1) {
                gridArray[i][j][0] = ' ' ;
            }
            else if (i%2 == 1 && j%2 == 0) {
                gridArray[i][j][0] = ' ';
            }
            else if (i%2 == 1 && i%2 == 1){
                gridArray[i][j][0] = ' ';
            }
        }
    }
    system("cls");
    FILE *game ;                                                                              //File Pointer Declaration
    printf("Load Game: Press (2) : ");
    int load;
    scanf("%d",&load);
    switch (load) {
    case 2 :
        game = fopen("Save.txt", "r");                                                        //Open Text File with the name "Save" to load the last saved data of the grid
        for(int i=0; i<n; i++) {                                                              //Loop for Scanning the saved data of the grid to the game
            for(int j=0; j<n; j++) {
                fscanf(game, "%c", &gridArray[i][j][0]);
            }
        }
        fscanf(game, "%d", &m);
        fscanf(game, "%d", &p[0].score);
        fscanf(game, "%d", &p[1].score);
        fclose(game);                                                                         //Close The File
        break;
    }

    if (gamemode == 1) {
        printf("NOTE: \'A\' is for Player (1) & \'B\' is for Player (2)\n\n");                // To let the user know what is A and what is B that will be printed in the scoring process
        printf("\t\t\t     0 1 2 3 4\n\n");
    }
    else if (gamemode == 2) {
        printf("NOTE: \'A\' is for Player (1) & \'B\' is for Player (2)\n\n");                // To let the user know what is A and what is B that will be printed in the scoring process
        printf("\t\t\t     0 1 2 3 4 5 6 7 8 9 10\n");
    }
    for (int i=0 ; i<n ; i++) {
        if (i != 10) {
            printf("\t\t\t%d    ",i);
        }
        else if (i == 10) {
            printf("\t\t       %d    ",i);
        }
        for (int j=0 ; j<n ; j++) {
            printf("%c ",gridArray[i][j][0]);
        }
        printf("\n");
    }
    int count = 0;                                                                             // if count is even so its player1 turn if odd player 2 turn
    int player_id = 0;                                                                         // for player id
    printf("\n");
    int turn = 0 ;
    int freelines = 0 ;
    for( int i=0 ; i<m ; i++) {
        player_id = count%2;
        if (gamemode == 1) {
            printf("\t\t\tPlayer (%d) Turn\n\n", player_id+1);                                // player_id will always equal 1 or 0, 1 when count is odd ,0 when count is even
        }
        else if (gamemode == 2) {
            printf("         \t\t\tPlayer (%d) Turn\n\n", player_id+1);
        }
        printf("Enter Row Then Column Of The Required Line [example: 0 3] --> ");
        int r,c;   //r = row , c = column
        clock_t start, end;     // clock_t is a type(class) and this is used in the timer function
        double cpu_time_used;
        start = clock();  //the beginning of counting
        scanf("%d %d",&r,&c);
        end = clock();   //the end of counting
        cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
        if(cpu_time_used>59.99){
          while(cpu_time_used>60){
          cpu_time_used=cpu_time_used-60 ; //the bonus part (that when the user idle for a minute we update the time)
          }
        }
        if((((r%2==1) && (c%2==0)) || ((r%2==0) && (c%2==1)))&& r<n && c<n){
          printf("\033[1;36m");
          printf("\nplayer(%d) took : %.2f seconds to play his turn.\n",(count%2)+1,cpu_time_used);
          printf("\033[0m");
          Sleep(1500);
        }
        printf("\n");
        fflush(stdin);              //remove '/n' from input stream (stdin) FILE
        while( ((r%2==0) && (c%2==0)) || ((r%2==1) && (c%2==1)) || (r>=n) || (c>=n) || (r<0) || (c<0)|| (isalpha(r)) || (isalpha(c)) || (gridArray[r][c][0] == '|') || (gridArray[r][c][0] == '-') ) {
            printf("\'WRONG INPUT\' Enter Row Then Column Of The Required Line [example: 0 3] --> ");
            cpu_time_used = 0 ;
            start = clock();
            scanf("%d %d",&r,&c);
            end = clock();
            cpu_time_used = ((double) (end - start)) / CLOCKS_PER_SEC;
            if(cpu_time_used>59.99){
              while(cpu_time_used>60){
               cpu_time_used=cpu_time_used-60 ; //the bonus part (that when the user idle for a minute we update the time)
              }
             }
            if((((r%2==1) && (c%2==0)) || ((r%2==0) && (c%2==1)))&& r<n && c<n && isalpha(r)==0 && isalpha(c)==0){
              printf("\033[1;36m");
              printf("\nplayer(%d) took : %.2f seconds to play his turn.\n",(count%2)+1,cpu_time_used);
              printf("\033[0m");
              Sleep(1500);
            }
            fflush(stdin);
        }
        cpu_time_used=0;
        turn++ ;
        for(int i=0 ; i<n ; i++) {
            for(int j=0 ; j<n ; j++) {
                if (r == i && c == j) {
                    if (i%2 == 0 && j%2 == 1) {
                        gridArray[r][c][0] = '-';
                        gridArray[r][c][1] = player_id;

                    }
                    else if (i%2 == 1 && j%2 == 0) {
                        gridArray[r][c][0] = '|';
                        gridArray[r][c][1] = player_id;

                    }
                }
            }
        }
        count++;                                                                               // when any player enter his input count inc by one to change turns
        if (gridArray[r][c] [0]== '|') {                                                       //checks if the last vertical line drawn made a box or not
            if ( (gridArray[r][c+2][0] == '|')&&(gridArray[r+1][c+1][0] == '-')&&(gridArray[r-1][c+1][0] == '-')&&(gridArray[r][c-2][0] =='|')&&(gridArray[r-1][c-1][0] == '-')&&(gridArray[r+1][c-1][0] == '-') ){
                p[player_id].score += 2;
                count++;                                                                       //if any player draw a box he will continue playing until he did not draw a box so count will remain even or odd
                if (count % 2 == 0) {
                    printf("%c",gridArray[r][c+1][0]= 'A');                                    //player1 Symbol
                    printf("%c",gridArray[r][c-1][0]= 'A');                                    //player1 Symbol
                }
                else {
                    printf("%c",gridArray[r][c+1][0]= 'B');                                    //player2 Symbol
                    printf("%c",gridArray[r][c-1][0]= 'B');                                    //player2 Symbol
                }
            }
            else if ( (gridArray[r][c+2][0] == '|')&&(gridArray[r+1][c+1][0] == '-')&&(gridArray[r-1][c+1][0] == '-') ) {
                p[player_id].score += 1;
                count++;
                if (count % 2 == 0){
                    printf("%c",gridArray[r][c+1][0] = 'A');                                   //player1 Symbol
                }
                else {
                printf("%c",gridArray[r][c+1][0] = 'B');                                       //player2 Symbol
                }
            }
            else if ( (gridArray[r][c-2][0]=='|')&&(gridArray[r-1][c-1][0]=='-')&&(gridArray[r+1][c-1][0]=='-') ) {
                p[player_id].score += 1;
                count++;
                if (count % 2 == 0) {
                    printf("%c",gridArray[r][c-1][0] = 'A');                                   //player1 Symbol
                }
                else {
                    printf("%c",gridArray[r][c-1][0] = 'B');                                   //player2 Symbol
                }
            }
        }
        else if (gridArray[r][c][0]=='-') {                                                    //checks if the last horizontal line drawn made a box or not
            if ( (gridArray[r+2][c][0]=='-')&&(gridArray[r-2][c][0]=='-')&&(gridArray[r+1][c+1][0]=='|')&&(gridArray[r+1][c-1][0]=='|')&&(gridArray[r-1][c+1][0]=='|')&&(gridArray[r-1][c-1][0]=='|') ) {
                p[player_id].score += 2;
                count++;
                if (count % 2 == 0) {
                    printf("%c",gridArray[r+1][c][0] = 'A');                                   //player1 Symbol
                    printf("%c",gridArray[r-1][c][0] = 'A');                                   //player1 Symbol
                }
                else {
                    printf("%c",gridArray[r+1][c][0] = 'B');                                   //player2 Symbol
                    printf("%c",gridArray[r-1][c][0] = 'B');                                   //player2 Symbol
                }
            }
            else if ( (gridArray[r+2][c][0]=='-')&&(gridArray[r+1][c+1][0]=='|')&&(gridArray[r+1][c-1][0]=='|') ) {
                p[player_id].score += 1;
                count++;
                if (count % 2 == 0) {
                    printf("%c",gridArray[r+1][c][0] = 'A');                                   //player1 Symbol
                }
                else {
                    printf("%c",gridArray[r+1][c][0] = 'B');                                   //player2 Symbol
                }
            }
            else if ( (gridArray[r-2][c][0]=='-')&&(gridArray[r-1][c+1][0]=='|')&&(gridArray[r-1][c-1][0]=='|') ) {
                p[player_id].score+=1;
                count++;
                if (count % 2 == 0) {
                    printf("%c",gridArray[r-1][c][0] = 'A');                                   //player1 Symbol
                }
                else {
                    printf("%c",gridArray[r-1][c][0] = 'B');                                   //player2 Symbol
                }
            }
        }
        system("cls");
        if (gamemode == 1) {
            printf("NOTE: \'A\' is for Player (1) & \'B\' is for Player (2)\n\n");
            printf("\t\t\t     0 1 2 3 4\n");
        }
        else if (gamemode == 2) {
            printf("NOTE: \'A\' is for Player (1) & \'B\' is for Player (2)\n\n");
            printf("\t\t\t     0 1 2 3 4 5 6 7 8 9 10\n");
        }
        for (int i=0 ; i<n ; i++) {
           if (i != 10) {
                printf("\t\t\t%d    ",i);
            }
            else if (i == 10) {
                printf("\t\t       %d    ",i);
            }
            for (int j=0 ; j<n ; j++) {
                if ( (i%2 == 1)&& (j%2==1)&&(gridArray[i][j][0]=='A') ) {                   //we here check whether the cell saving a character A
                    printf("\033[1;34m");                                                   //using ANSI color of blue
                    printf("%c ",gridArray[i][j][0]);
                    printf("\033[0m");                                                      //using ANSI color of reset
                }
                else if ( (i%2 == 1)&& (j%2 == 1) && (gridArray[i][j][0] == 'B') ) {        //we here check whether the cell saving a character B
                    printf("\033[1;31m");                                                   //using ANSI color of Red
                    printf("%c ",gridArray[i][j][0]);
                    printf("\033[0m");                                                      //using ANSI color of reset
                }
                else if ( (i%2 == 0) && (j%2 == 1 ) && (gridArray[i][j][0] == '-') ) {
                    if (gridArray[i][j][1]==0) {
                        printf("\033[1;34m");                                               //using ANSI color of blue
                        printf("%c ",gridArray[i][j][0]);
                        printf("\033[0m");
                    }
                    else {
                        printf("\033[1;31m");                                               //using ANSI color of red
                        printf("%c ",gridArray[i][j][0]);
                        printf("\033[0m");
                    }
                }
                else if ( (i%2 == 1) && (j%2 == 0 ) && (gridArray[i][j][0] == '|') ) {
                    if (gridArray[i][j][1]==0) {
                        printf("\033[1;34m");                                               //using ANSI color of blue
                        printf("%c ",gridArray[i][j][0]);
                        printf("\033[0m");
                    }
                    else {
                        printf("\033[1;31m");                                               //using ANSI color of red
                        printf("%c ",gridArray[i][j][0]);
                        printf("\033[0m");
                    }
                }
                else {
                printf("%c ",gridArray[i][j][0]);                                           //we here check whether the cell saving a character '-' or '|'
                }
            }
            printf("\n");
        }
        FILE *game ;                                                                        //File Pointer Declaration
        int save;
        freelines = m - turn ;
        printf("Save Game: Press(1) : ");
        scanf("%d",&save);
        switch (save) {
            case 1 :
                game = fopen("Save.txt", "w");                                             //Open Text File with the name "Save" to save in it the data of the grid
                for (int i=0; i<n; i++) {                                                  //Loop for printing the data of the grid to a file to save it
                    for (int j=0; j<n; j++) {
                        fprintf (game,"%c",gridArray[i][j][0]);
                    }
                }
                fprintf(game,"%d\n",freelines);
                fprintf(game,"%d\n",p[0].score);
                fprintf(game,"%d",p[1].score);
                fclose(game);                                                             //closing File
                break;
        }
        printf("\n");
        printf("\033[1;34m");                                                             //using ANSI color of blue
        printf("Player (1) Score: %d\n",p[0].score);
        printf("\033[0m");                                                                //using ANSI color of reset
        printf("\033[1;31m");                                                             //using ANSI color of red
        printf("Player (2) Score: %d\n",p[1].score);
        printf("\033[0m");                                                                //using ANSI color of reset
        if (i == m-1) {
            if (p[0].score > p[1].score) {
                printf("\033[1;34m");                                                     //using ANSI color of blue
                printf("\nPlayer 1 is The WINNER! \n\n");                             //player1 color
                printf("\033[0m");                                                        //using ANSI color of reset
            }
            else if (p[0].score < p[1].score) {
                printf("\033[1;31m");                                                     //using ANSI color of red
                printf("\nPlayer 2 is The WINNER! \n\n");                             //player2 color
                printf("\033[0m");                                                        //using ANSI color of reset
            }
            else {
                printf("\033[0;35m");
                printf("\nThe Game is DRAW! \n\n");
                printf("\033[0m");                                                        //using ANSI color of reset
            }
        }
    printf("\033[1;32m");
    printf("No of Remaining Lines : %d",freelines);
    printf("\033[0m");
    }
}
int main(){

    print();
    return 0;
}
